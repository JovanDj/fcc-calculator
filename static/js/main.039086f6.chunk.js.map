{"version":3,"sources":["components/Button.jsx","components/ClearButton.jsx","components/Input.jsx","App.js","serviceWorker.js","index.js"],"names":["Button","props","id","className","val","children","isNaN","onClick","handleClick","ClearButton","handleClear","Input","value","input","placeholder","inputd","readOnly","App","addToInput","state","console","log","indexOf","setState","handleEqual","math","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.039086f6.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Button.css\";\n\nconst isOperator = val => {\n  return !isNaN(val) || val === \".\" || val === \"=\";\n};\nconst Button = props => {\n  return (\n    <div\n      id={props.id}\n      className={`button-wrapper ${\n        isOperator(props.children) ? \"\" : \"operator\"\n      }`}\n      onClick={() => props.handleClick(props.children)}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport \"./ClearButton.css\";\n\nconst ClearButton = props => {\n  return (\n    <div id={props.id} className=\"clear-btn\" onClick={props.handleClear}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default ClearButton;\n","import React from \"react\";\nimport \"./Input.css\";\n\nconst Input = props => {\n  return (\n    <input\n      value={props.input}\n      placeholder={props.inputd}\n      readOnly\n      id=\"display\"\n      className=\"input\"\n    ></input>\n  );\n};\n\nexport default Input;\n","import * as math from \"mathjs\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Button from \"./components/Button\";\nimport ClearButton from \"./components/ClearButton\";\nimport Input from \"./components/Input\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\"\n    };\n  }\n\n  addToInput = val => {\n    const { input } = this.state;\n\n    if (val === \"0\") {\n      console.log(\"entered 0\");\n      if (input.indexOf(0) === 0) {\n        return;\n      }\n    }\n\n    if (val === \".\") {\n      if (input.indexOf(\".\") === 0) {\n        return;\n      }\n    }\n\n    // if (input.split(\"\") && val === \".\") {\n    //   return;\n    // }\n\n    this.setState({ input: input + val });\n  };\n\n  handleEqual = () => {\n    this.setState({\n      input: math.evaluate(this.state.input)\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"calc-wrapper\">\n          <Input input={this.state.input} />\n          <div className=\"row\">\n            <Button id={\"seven\"} handleClick={this.addToInput}>\n              7\n            </Button>\n            <Button id={\"eight\"} handleClick={this.addToInput}>\n              8\n            </Button>\n            <Button id={\"nine\"} handleClick={this.addToInput}>\n              9\n            </Button>\n            <Button id={\"divide\"} handleClick={this.addToInput}>\n              /\n            </Button>\n          </div>\n          <div className=\"row\">\n            <Button id={\"four\"} handleClick={this.addToInput}>\n              4\n            </Button>\n            <Button id={\"five\"} handleClick={this.addToInput}>\n              5\n            </Button>\n            <Button id={\"six\"} handleClick={this.addToInput}>\n              6\n            </Button>\n            <Button id={\"multiply\"} handleClick={this.addToInput}>\n              *\n            </Button>\n          </div>\n          <div className=\"row\">\n            <Button id={\"one\"} handleClick={this.addToInput}>\n              1\n            </Button>\n            <Button id={\"two\"} handleClick={this.addToInput}>\n              2\n            </Button>\n            <Button id={\"three\"} handleClick={this.addToInput}>\n              3\n            </Button>\n            <Button id={\"add\"} handleClick={this.addToInput}>\n              +\n            </Button>\n          </div>\n          <div className=\"row\">\n            <Button id={\"decimal\"} handleClick={this.addToInput}>\n              .\n            </Button>\n            <Button id={\"zero\"} handleClick={this.addToInput}>\n              0\n            </Button>\n            <Button id={\"equals\"} handleClick={() => this.handleEqual()}>\n              =\n            </Button>\n            <Button id={\"subtract\"} handleClick={this.addToInput}>\n              -\n            </Button>\n          </div>\n\n          <div className=\"row\">\n            <ClearButton\n              id={\"clear\"}\n              handleClear={() => this.setState({ input: \"\" })}\n            >\n              Clear\n            </ClearButton>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}